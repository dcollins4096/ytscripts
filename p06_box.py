

if 0:
    car=taxi.taxi('fg02')
    car.frames=[0,8]
    #car.plot()
    ds = car.load(0)
    ds.print_stats()
    ad=ds.all_data()
    grid=ds.index.grids[0]
    print "density", ad.quantities['Extrema']('density')
    print "Tempera", ad.quantities['Extrema']('Temperature')
    print "TE", ad.quantities['Extrema']('TotalEnergy')

if 1:
    car=taxi.taxi('fg02')
    car.frames=[0,8]
    plt.clf()
    #fig, (ax_rho, ax_P, ax_gz) = plt.subplots(3, 1) #, sharex=True)
    fig, (ax_rho, ax_P, ax_gz) = plt.subplots(3, 1) #, sharex=True)
    for frame in [0,1]: #range(8):
        ds = car.load(frame)
        grid=ds.index.grids[0]
        sl=[slice(8,9),slice(8,9),slice(None)]
        z=grid['z'][sl].flatten()
        c = {0:'r',1:'g',8:'b'}.get(frame, 'k')
        density = grid['density'][sl].flatten()
        dumb_plt(ax_rho, z.flatten(),density,'z','density','p06_%s_oned_several.pdf'%(car.outname), c=c)
        dumb_plt(ax_P, z.flatten(),grid['pressure'][sl].flatten(),'z','pressure','p06_%s_oned_several.pdf'%(car.outname), c=c)
        P = grid['pressure'][sl].flatten()
        P = P.in_units('code_mass/(code_length*code_time**2)')
        gradp = ( (P[1:]-P[:-1])/((z[1:]-z[:-1])) ).in_units('code_mass/(code_length**2*code_time**2)')
        zbar = 0.5*(z[1:]+z[:-1])
        dumb_plt(ax_gz, zbar,gradp,'z','pressure','p06_%s_oned_several.pdf'%(car.outname), c=c,linestyle="--")
        az = grid['External_Acceleration_z'][sl].flatten()
        fz = (density.in_units('code_density')*az).v
        dumb_plt(ax_gz, z.flatten(),fz,'z','density','p06_%s_oned_several.pdf'%(car.outname), c=c)
    plt.close(fig)

if 0:
    b=nar(
        [ [13, 8.009136e-05, 8.009136e-05, 0.00096109632, 0.016579514556299, 0.016570730947099],
       [14, -8.009136e-05, 0, 0.00096109632, 0.016570730947099, 0.016570730947099],
       [15, -8.009136e-05, -8.009136e-05, 0.00096109632, 0.0165619473379, 0.016570730947099],
       [16, -8.009136e-05, -0.00016018272, 0.00096109632, 0.016545861278657, 0.016570730947099],
       [17, -8.009136e-05, -0.00024027408, 0.00096109632, 0.01652501462486, 0.016570730947099],
       [18, -8.009136e-05, -0.00032036544, 0.00096109632, 0.016500315654888, 0.016570730947099],
       [19, -8.009136e-05, -0.0004004568, 0.00096109632, 0.016472289607292, 0.016570730947099],
       [20, -8.009136e-05, -0.00048054816, 0.00096109632, 0.016441291015211, 0.016570730947099],
       [21, -8.009136e-05, -0.00056063952, 0.00096109632, 0.016407580232291, 0.016570730947099],
       [22, -8.009136e-05, -0.00064073088, 0.00096109632, 0.016371359033937, 0.016570730947099],
       [23, -8.009136e-05, -0.00072082224, 0.00096109632, 0.016332789791971, 0.016570730947099],
       [24, -8.009136e-05, -0.0008009136, 0.00096109632, 0.016292006856983, 0.016570730947099],
       [25, -8.009136e-05, -0.00088100496, 0.00096109632, 0.016249123804613, 0.016570730947099],
       [12, 8.009136e-05, 0, 0.00096109632, 0.016570730947099, 0.016570730947099],
       [11, 8.009136e-05, -8.009136e-05, 0.00096109632, 0.0165619473379, 0.016570730947099],
       [10, 8.009136e-05, -0.00016018272, 0.00096109632, 0.016545861278657, 0.016570730947099],
       [9, 8.009136e-05, -0.00024027408, 0.00096109632, 0.01652501462486, 0.016570730947099],
       [8, 8.009136e-05, -0.00032036544, 0.00096109632, 0.016500315654888, 0.016570730947099],
       [7, 8.009136e-05, -0.0004004568, 0.00096109632, 0.016472289607292, 0.016570730947099],
       [6, 8.009136e-05, -0.00048054816, 0.00096109632, 0.016441291015211, 0.016570730947099],
       [5, 8.009136e-05, -0.00056063952, 0.00096109632, 0.016407580232291, 0.016570730947099],
       [4, 8.009136e-05, -0.00064073088, 0.00096109632, 0.016371359033937, 0.016570730947099],
       [3, 8.009136e-05, -0.00072082224, 0.00096109632, 0.016332789791971, 0.016570730947099],
       [2, 8.009136e-05, -0.0008009136, 0.00096109632, 0.016292006856983, 0.016570730947099],
       [1, 8.009136e-05, -0.00088100496, 0.00096109632, 0.016249123804613, 0.016570730947099],
       [0, 8.009136e-05, -0.00096109632, 0.00096109632, 0.016204238299692, 0.016570730947099] ])


    plt.clf()
    fig, (ax_rho, ax_gz) = plt.subplots(2, 1) #, sharex=True)
    ax_gz.scatter(b[:,0], b[:,1],c='r',label='g')
    ax_gz.scatter(b[:,0], b[:,2],c='g',label='int(g)')
    ax_gz.set_ylim(min(b[:,2]),max(b[:,2]))
    ax_rho.scatter(b[:,0], b[:,4],c='b')
    ax_rho.set_ylim(min(b[:,4]),max(b[:,4]))
    fig.savefig('p06_dumb1.pdf')

